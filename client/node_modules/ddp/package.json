{
  "name": "ddp",
  "version": "0.7.0",
  "description": "Node.js module to connect to servers using DDP protocol.",
  "author": {
    "name": "Tom Coleman",
    "email": "tom@thesnail.org",
    "url": "http://tom.thesnail.org"
  },
  "contributors": [
    {
      "name": "Thomas Sarlandie",
      "email": "thomas@sarlandie.net",
      "url": "http://www.sarfata.org"
    },
    {
      "name": "Mason Gravitt",
      "email": "emgee@gravitronic.com"
    },
    {
      "name": "Mike Bannister",
      "email": "notimpossiblemike@gmail.com",
      "url": "http://po.ssibiliti.es"
    },
    {
      "name": "Chris Mather",
      "email": "mather.chris@gmail.com",
      "url": "http://eventedmind.com"
    },
    {
      "name": "Tarang Patel"
    },
    {
      "name": "Vaughn Iverson",
      "email": "vsivsi@yahoo.com"
    }
  ],
  "license": "MIT/X11",
  "main": "lib/ddp-client",
  "keywords": [
    "ddp",
    "meteor",
    "protocol"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/oortcloud/node-ddp-client.git"
  },
  "dependencies": {
    "ddp-underscore-patched": "0.8.1-2",
    "ddp-ejson": "0.8.1-3",
    "faye-websocket": "~0.7.1"
  },
  "devDependencies": {
    "mocha": "1.9.x",
    "sinon": "1.7.x",
    "rewire": "1.1.x"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test"
  },
  "engines": {
    "node": "*"
  },
  "bugs": {
    "url": "https://github.com/oortcloud/node-ddp-client/issues"
  },
  "readme": "Node DDP Client\n===============\n\nA callback style [DDP](https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md) ([Meteor](http://meteor.com/)'s Distributed Data Protocol) node client, originally based alansikora's [node-js_ddp-client](https://github.com/alansikora/node-js_ddp-client) and Meteor's python client. Uses a more callback style approach.\n\nThe client implements the pre1 and pre2 versions of DDP.\n\nInstallation\n============\n\n```\n  npm install ddp\n```\n\nAuthentication\n==============\nBuilt-in authentication support was removed in ddp 0.7.0 due to changes in Meteor version 0.8.2. If you need authentication, try https://github.com/vsivsi/ddp-login.\n\n\nExample\n=======\n\nPlease see the example in `examples/example.js`. Or here for reference:\n\n```js\nvar DDPClient = require(\"ddp\");\n\nvar ddpclient = new DDPClient({\n  host: \"localhost\",\n  port: 3000,\n  /* optional: */\n  auto_reconnect: true,\n  auto_reconnect_timer: 500,\n  use_ssl: false,\n  maintain_collections: true // Set to false to maintain your own collections.\n});\n\n/*\n * Connect to the Meteor Server\n */\nddpclient.connect(function(error) {\n  // If auto_reconnect is true, this callback will be invoked each time\n  // a server connection is re-established\n  if (error) {\n    console.log('DDP connection error!');\n    return;\n  }\n\n  console.log('connected!');\n\n  setTimeout(function () {\n    /*\n     * Call a Meteor Method\n     */\n    ddpclient.call(\n      'deletePosts',             // name of Meteor Method being called\n      ['foo', 'bar'],            // parameters to send to Meteor Method\n      function (err, result) {   // callback which returns the method call results\n        console.log('called function, result: ' + result);\n      },\n      function () {              // callback which fires when server has finished\n        console.log('updated');  // sending any updated documents as a result of\n        console.log(ddpclient.collections.posts);  // calling this method\n      }\n    );\n  }, 3000);\n\n  /*\n   * Call a Meteor Method while passing in a random seed.\n   * Added in DDP pre2, the random seed will be used on the server to generate\n   * repeatable IDs. This allows the same id to be generated on the client and server\n   */\n  var Random = require(\"ddp-random\"),\n      random = Random.createWithSeeds(\"randomSeed\");  // seed an id generator\n\n  ddpclient.callWithRandomSeed(\n    'createPost',              // name of Meteor Method being called\n    [{ _id : random.id(),      // generate the id on the client\n      body : \"asdf\" }],\n    \"randomSeed\",              // pass the same seed to the server\n    function (err, result) {   // callback which returns the method call results\n      console.log('called function, result: ' + result);\n    },\n    function () {              // callback which fires when server has finished\n      console.log('updated');  // sending any updated documents as a result of\n      console.log(ddpclient.collections.posts);  // calling this method\n    }\n  );\n\n  /*\n   * Subscribe to a Meteor Collection\n   */\n  ddpclient.subscribe(\n    'posts',                  // name of Meteor Publish function to subscribe to\n    [],                       // any parameters used by the Publish function\n    function () {             // callback when the subscription is complete\n      console.log('posts complete:');\n      console.log(ddpclient.collections.posts);\n    }\n  );\n});\n\n/*\n * Useful for debugging and learning the ddp protocol\n */\nddpclient.on('message', function (msg) {\n  console.log(\"ddp message: \" + msg);\n});\n\n/*\n * Close the ddp connection. This will close the socket, removing it\n * from the event-loop, allowing your application to terminate gracefully\n */\nddpclient.close();\n\n/*\n * If you need to do something specific on close or errors.\n * You can also disable auto_reconnect and\n * call ddpclient.connect() when you are ready to re-connect.\n*/\nddpclient.on('socket-close', function(code, message) {\n  console.log(\"Close: %s %s\", code, message);\n});\n\nddpclient.on('socket-error', function(error) {\n  console.log(\"Error: %j\", error);\n});\n\n/*\n * You can access the EJSON object used by ddp.\n */\nvar oid = new ddpclient.EJSON.ObjectID();\n```\n\nUnimplemented Features\n====\nThe node DDP client does not implement ordered collections, something that while in the DDP spec has not been implemented in Meteor yet.\n\nThanks\n======\n\nMany thanks to Alan Sikora for the ddp-client which formed the inspiration for this code.\n\nContributions:\n * Tom Coleman (@tmeasday)\n * Thomas Sarlandie (@sarfata)\n * Mason Gravitt (@emgee3)\n * Mike Bannister (@possiblities)\n * Chris Mather (@eventedmind)\n * James Gill (@jagill)\n * Vaughn Iverson (@vsivsi)\n",
  "readmeFilename": "README.markdown",
  "homepage": "https://github.com/oortcloud/node-ddp-client",
  "_id": "ddp@0.7.0",
  "dist": {
    "shasum": "ae0cef50bcf3a1433eca7152000a7d53b0a7be47"
  },
  "_from": "ddp@0.7.0",
  "_resolved": "https://registry.npmjs.org/ddp/-/ddp-0.7.0.tgz"
}
